generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model vortex_User {
  id                 Int                         @id @default(autoincrement())
  username           String                      @unique
  password           String
  firstName          String?
  lastName           String?
  email              String                      @unique
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime?
  Post               vortex_Post[]
  Community          vortex_Community[]
  Moderator          vortex_Moderator[]
  RefreshToken       vortex_RefreshToken[]
  Likes              vortex_Likes[]
  DisLikes           vortex_DisLikes[]
  FollowingCommunity vortex_FollowingCommunity[]
  Comment            vortex_Comment[]
  CommentLike        vortex_CommentLike[]
  CommentDisLike     vortex_CommentDisLike[]
  Follower           vortex_Follow[]             @relation("UserFollowers")
  Following          vortex_Follow[]             @relation("UserFollowing")
}

model vortex_Follow {
  followerId  Int
  followingId Int
  Follower    vortex_User @relation("UserFollowers", fields: [followerId], references: [id])
  Following   vortex_User @relation("UserFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model vortex_FollowingCommunity {
  User        vortex_User      @relation(fields: [userId], references: [id])
  userId      Int
  Community   vortex_Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([userId, communityId])
}

model vortex_Likes {
  User   vortex_User @relation(fields: [userId], references: [id])
  userId Int
  Post   vortex_Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
}

model vortex_DisLikes {
  User   vortex_User @relation(fields: [userId], references: [id])
  userId Int
  Post   vortex_Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
}

model vortex_RefreshToken {
  id     Int         @id @default(autoincrement())
  userId Int
  token  String      @unique
  User   vortex_User @relation(fields: [userId], references: [id])
}

model vortex_Moderator {
  userId      Int
  user        vortex_User      @relation(fields: [userId], references: [id])
  community   vortex_Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([communityId, userId])
}

model vortex_Community {
  id                 Int                         @id @default(autoincrement())
  name               String                      @unique
  description        String                      @default("no description") @db.VarChar(240)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime?
  Post               vortex_Post[]
  creatorId          Int
  img                String
  icon               String
  user               vortex_User                 @relation(fields: [creatorId], references: [id])
  Moderator          vortex_Moderator[]
  FollowingCommunity vortex_FollowingCommunity[]
}

model vortex_Post {
  id          Int               @id @default(autoincrement())
  title       String
  content     String            @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?
  authorId    Int
  author      vortex_User       @relation(fields: [authorId], references: [id])
  Community   vortex_Community  @relation(fields: [communityId], references: [id])
  communityId Int
  Likes       vortex_Likes[]
  DisLikes    vortex_DisLikes[]
  Comment     vortex_Comment[]
}

model vortex_Comment {
  id             Int                     @id @default(autoincrement())
  content        String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime?
  authorId       Int
  author         vortex_User             @relation(fields: [authorId], references: [id])
  postId         Int
  post           vortex_Post             @relation(fields: [postId], references: [id])
  CommentLike    vortex_CommentLike[]
  CommentDisLike vortex_CommentDisLike[]
}

model vortex_CommentLike {
  User      vortex_User    @relation(fields: [userId], references: [id])
  userId    Int
  Comment   vortex_Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}

model vortex_CommentDisLike {
  User      vortex_User    @relation(fields: [userId], references: [id])
  userId    Int
  Comment   vortex_Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}
