generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String
  firstName          String?
  lastName           String?
  email              String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  Post               Post[]
  Community          Community[]
  Moderator          Moderator[]
  RefreshToken       RefreshToken[]
  Likes              Likes[]
  DisLikes           DisLikes[]
  FollowingCommunity FollowingCommunity[]
  Comment            Comment[]
  CommentLike        CommentLike[]
  CommentDisLike     CommentDisLike[]
  Follower           Follow[]             @relation("UserFollowers")
  Following          Follow[]             @relation("UserFollowing")
}

model Follow {
  followerId  Int
  followingId Int
  Follower    User @relation("UserFollowers", fields: [followerId], references: [id])
  Following   User @relation("UserFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model FollowingCommunity {
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  Community   Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([userId, communityId])
}

model Likes {
  User   User @relation(fields: [userId], references: [id])
  userId Int
  Post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
}

model DisLikes {
  User   User @relation(fields: [userId], references: [id])
  userId Int
  Post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  userId Int
  token  String @unique
  User   User   @relation(fields: [userId], references: [id])
}

model Moderator {
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([communityId, userId])
}

model Community {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String               @default("no description") @db.VarChar(240)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  Post               Post[]
  creatorId          Int
  img                String
  icon               String
  user               User                 @relation(fields: [creatorId], references: [id])
  Moderator          Moderator[]
  FollowingCommunity FollowingCommunity[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id])
  Community   Community  @relation(fields: [communityId], references: [id])
  communityId Int
  Likes       Likes[]
  DisLikes    DisLikes[]
  Comment     Comment[]
}

model Comment {
  id             Int              @id @default(autoincrement())
  content        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id])
  postId         Int
  post           Post             @relation(fields: [postId], references: [id])
  CommentLike    CommentLike[]
  CommentDisLike CommentDisLike[]
}

model CommentLike {
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  Comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}

model CommentDisLike {
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  Comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}
